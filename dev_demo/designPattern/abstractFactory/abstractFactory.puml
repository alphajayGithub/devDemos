@startuml

ProductA <|.. ConcreteProductA1
ProductA <|.. ConcreteProductA2

ProductB <|.. ConcreteProductB1
ProductB <|.. ConcreteProductB2


interface ProductA{
  UsefulFunctionA()
}

interface ProductB{
  UsefulFunctionB()
  AnotherUsefulFunctionB(ProductA &)
}

ConcreteProductA1 : UsefulFunctionA()
ConcreteProductA2 : UsefulFunctionA()

ConcreteProductB1 : UsefulFunctionB()
ConcreteProductB1 : AnotherUsefulFunctionB(ProductA &)

ConcreteProductB2 : UsefulFunctionB()
ConcreteProductB2 : AnotherUsefulFunctionB(ProductA &)

ConcreteFactory1 ..|> AbstractFactory
ConcreteFactory2 ..|> AbstractFactory
AbstractFactory ..> ProductA
AbstractFactory ..> ProductB

interface AbstractFactory{
  ProductA * CreateProductA()
  ProductB * CreateProductB()
}
ConcreteFactory1 : CreateProductA()
ConcreteFactory1 : CreateProductB()

ConcreteFactory2 : CreateProductA()
ConcreteFactory2 : CreateProductB()


Client -left-> AbstractFactory

annotation Client{
    Client(AbstractFactory & ) { ... Operation()}
}

@enduml